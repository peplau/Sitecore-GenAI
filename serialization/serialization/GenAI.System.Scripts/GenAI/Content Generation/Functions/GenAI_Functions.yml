---
ID: "0a2c8b1a-f584-42fa-89fb-3cbc174e3d49"
Parent: "3596b528-9b00-4c8d-9a5a-d9c8ad35e1a4"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/GenAI/Content Generation/Functions/GenAI_Functions
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function -Name GenAI_Constants
    
    function Get-GenAISettings {
        $settings = Get-Item -Path master: -Query "$($GenAI_Settings_Path)//*[@@templateid='$($GenAI_Settings_TemplateID)']"
        if ($settings -eq $null){
            return $null
        }
        $model = Get-OpenAIModel $settings
        $baseUrl = $settings[$GenAI_BaseURL_FieldName]
        if ($baseUrl.EndsWith("/")){
            $baseUrl = $baseUrl.Substring(0,$baseUrl.Length-1);
        }
        return @{
            apiKey = $settings[$GenAI_ApiKey_FieldName]
            model = $model
            baseUrl = $baseUrl
            username = $settings[$GenAI_Username_FieldName]
            password = $settings[$GenAI_Password_FieldName]
            useConnect = $settings[$GenAI_UseSitecoreConnect_FieldName]
            generateImageEndpoint = $settings[$GenAI_GenerateImageEndpoint_FieldName]
            graphQlBaseUrl = $settings[$GenAI_GraphQlBaseUrl_FieldName]
            graphQlClientId = $settings[$GenAI_GraphQlClientId_FieldName]
            graphQlClientSecret = $settings[$GenAI_GraphQlClientSecret_FieldName]
        };
    }
    
    function Get-OpenAIModel(){
        param( $settingsItem )
        $modelField = [Sitecore.Data.Fields.ReferenceField]$settingsItem.Fields[$GenAI_Model_FieldName]
        if ($modelField -eq $null){
            return [String]::Empty
        }
        $modelItem = $modelField.TargetItem
        if ($modelItem -eq $null){
            return [String]::Empty
        }
        return Get-FieldValue $modelItem $GenAI_ModelKey_FieldName $null
    }
    
    function Get-FieldValue(){
        param( $item, $fieldName, $defaultValue = "" )
        $field = $item.Fields[$fieldName]
        if ($field -eq $null){
            return $defaultValue
        }
        return $field.Value
    }
    
    function Get-MessageFromGpt(){
        param( $system, $user, $apiKey, $model)
        
        $headers = @{
            "Content-Type" = "application/json"
            "Authorization" = "Bearer $($apiKey)"
        }
        $requestData = @{
            model = $model
            messages = @(
                @{
                    role = "system"
                    content = $system
                },
                @{
                    role = "user"
                    content = $user
                }
            )
            max_tokens = 1000
        }
        $body = $requestData | ConvertTo-Json -Depth 3
        
        try {
            $response = Invoke-RestMethod -Uri "https://api.openai.com/v1/chat/completions" -Method Post -Headers $headers -Body $body
            $responseData = $response.choices[0].message.content
            return $responseData
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Generate-NewImage(){
        param( $prompt, $size, $apiKey)
        
        $headers = @{
            "Content-Type" = "application/json"
            "Authorization" = "Bearer $($apiKey)"
        }
        $requestData = @{
            model = "dall-e-3"
            prompt = $prompt
            size = $size
        }
        $body = $requestData | ConvertTo-Json -Depth 3
        
        try {
            $response = Invoke-RestMethod -Uri "https://api.openai.com/v1/images/generations" -Method Post -Headers $headers -Body $body
            $newImageUrl = $response.data[0].url
            return $newImageUrl
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Get-CHToken(){
        param( $baseUrl, $username, $password)
        
        $headers = @{
            "Content-Type" = "application/json"
        }
        $requestData = @{
            user_name = $username
            password = $password
        }
        $body = $requestData | ConvertTo-Json -Depth 3
        
        try {
            $response = Invoke-RestMethod -Uri "$($baseUrl)/api/authenticate" -Method Post -Headers $headers -Body $body
            $token = $response.token
            return $token
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Start-Upload(){
        param($baseUrl, $token, $fileName, $fileSize)
        
        $headers = @{
            "Content-Type" = "application/json"
            "X-Auth-Token" = $token
        }
        $requestData = @{
            file_name = $fileName
            file_size = $fileSize
            upload_configuration = @{
                name = "AssetUploadConfiguration"
                parameters = $null
            }
            action = @{
                name = "NewAsset"
                parameters = $null
            }
        }
        $body = $requestData | ConvertTo-Json -Depth 3
        
        try {
            $response = Invoke-WebRequest -Uri "$($baseUrl)/api/v2.0/upload" -Method Post -Headers $headers -Body $body -UseBasicParsing
            $content = $response.Content | ConvertFrom-Json
    
            return @{
                upload_identifier = $content.upload_identifier
                file_identifier = $content.file_identifier
                upload_url = $response.Headers.Location
            }
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Process-Upload(){
        param($startUploadReturn, $token, $file, $fileName)
    
        $headers = @{
            "X-Auth-Token" = $token
        }
        
        $boundary = [System.Guid]::NewGuid().ToString()
        $FilePath = $file.FullName
        $TheFile = [System.IO.File]::ReadAllBytes($FilePath)
        $TheFileContent = [System.Text.Encoding]::GetEncoding('iso-8859-1').GetString($TheFile)
        
        $LF = "`r`n"
        $bodyLines = (
            "--$boundary",
            "Content-Disposition: form-data; name=`"TheFile`"; filename=`"file.json`"",
            "Content-Type: application/json$LF",
            $TheFileContent,
            "--$boundary--$LF"
        ) -join $LF
        
        try {
            # Send the request
            $response = Invoke-RestMethod -Uri $startUploadReturn.upload_url -Method Post -Headers $headers -ContentType "multipart/form-data; boundary=`"$boundary`"" -Body $bodyLines
            return @{
                success = $response.success
                message = $response.message
            }
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Finalize-Upload(){
        param($baseUrl, $startUploadReturn, $token)
        $headers = @{
            "Content-Type" = "application/json"
            "X-Auth-Token" = $token
        }
        $requestData = @{
            upload_identifier = $startUploadReturn.upload_identifier
            file_identifier = $startUploadReturn.file_identifier
        }
        $body = $requestData | ConvertTo-Json -Depth 3
        
        try {
            $response = Invoke-RestMethod -Uri "$($baseUrl)/api/v2.0/upload/finalize" -Method Post -Headers $headers -Body $body
            return @{
                success = $response.success
                message = $response.message
                asset_id = $response.asset_id
                asset_identifier = $response.asset_identifier
            }
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Generate-PublicLink(){
        param($baseUrl, $assetId, $token)
        $headers = @{
            "Content-Type" = "application/json"
            "X-Auth-Token" = $token
        }
        $requestData = @{
            properties = @{
                RelativeUrl = [System.Guid]::NewGuid().ToString().Replace("{","").Replace("}","").Replace("-","")
                Resource = "downloadOriginal"
                ExpirationDate = (Get-Date).AddYears(1).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
                ConversionConfiguration = @{}
            }
            is_root_taxonomy_item = $false
            is_path_root = $false
            inherits_security = $true
            entitydefinition = @{
                href = "$($baseUrl)/api/entitydefinitions/M.PublicLink"
            }
            relations = @{
                AssetToPublicLink = @{
                    parents = @(
                        @{
                            href = "$($baseUrl)/api/entities/$assetId"                                
                        }
                    )
                }
            }
        }
        $body = $requestData | ConvertTo-Json -Depth 5
        
        try {
            $response = Invoke-RestMethod -Uri "$($baseUrl)/api/entitydefinitions/M.PublicLink/entities" -Method Post -Headers $headers -Body $body
            return @{
                id = $response.id
                identifier = $response.identifier
            }
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Get-PublicLinkUrl(){
        param($baseUrl, $publicLinkId, $token)
        $headers = @{
            "Content-Type" = "application/json"
            "X-Auth-Token" = $token
        }
        try {
            $response = Invoke-RestMethod -Uri "$($baseUrl)/api/entities/$($publicLinkId)" -Method Get -Headers $headers
            if($response.properties.Status -ne "Completed"){
                Start-Sleep -Seconds 2
                return Get-PublicLinkUrl $baseUrl $publicLinkId $token
            }
            return $response.public_link
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
    
    function Submit-AssetForReview(){
        param($baseUrl, $assetId, $token)
        $headers = @{
            "Content-Type" = "application/json"
            "X-Auth-Token" = $token
        }
        try {
            Invoke-RestMethod -Uri "$($baseUrl)/api/entities/$($assetId)/lifecycle/submit" -Method Post -Headers $headers
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }
    }
    
    function Generate-ImageSync(){
        param( $item, $imagePrompt, $newImageName, $dimensions, $apiKey, $settings, $authToken )
        
        # Generate image
        $newImageUrl = Generate-NewImage $imagePrompt $dimensions $apiKey
        
        # Get image binary from URL
        $tempFilePath = [Sitecore.IO.FileUtil]::MapPath([Sitecore.Configuration.Settings]::TempFolderPath) +"\"+[System.IO.Path]::GetFileName([System.IO.Path]::GetTempFileName()) + ".png"
        Invoke-WebRequest -Uri $newImageUrl -OutFile $tempFilePath -UseBasicParsing 
        $imageFile = Get-Item $tempFilePath
        $size = $imageFile.Length
        
        # Start upload
        $startUploadReturn = Start-Upload $settings.baseUrl $authToken $newImageName $size
        
        # Process upload
        $processUploadReturn = Process-Upload $startUploadReturn $authToken $imageFile $newImageName
        
        # Finalize upload
        $finalizeUploadReturn = Finalize-Upload $settings.baseUrl $startUploadReturn $authToken
        $success = $finalizeUploadReturn.sucess
        $assetId = $finalizeUploadReturn.asset_id
        $assetIdentifier = $finalizeUploadReturn.asset_identifier
        
        # Generate Public Link
        $generateLinkResult = Generate-PublicLink $settings.baseUrl $assetId $authToken
        $publicLinkUrl = Get-PublicLinkUrl $settings.baseUrl $generateLinkResult.id $authToken
        
        # Modify Status to "UnderReview"
        Submit-AssetForReview $settings.baseUrl $assetId $authToken
        
        # Image dimensions
        Add-Type -AssemblyName System.Drawing
        $image = [System.Drawing.Image]::FromFile($tempFilePath)
        $width = $image.Width
        $height = $image.Height            
        
        # Save on Item Field
        $item.Editing.BeginEdit()
        $imgValue = "<image src=""" + $publicLinkUrl + """ dam-id="""+$assetIdentifier+""" width="""+$width+""" height="""+$height+""" alt="""+$imagePrompt+""" dam-content-type=""Image"" thumbnailsrc="""+$settings.baseUrl+"/api/gateway/"+$assetId+"/thumbnail"" />"
        $item[$fieldName] = $imgValue
        $item.Editing.EndEdit()
    }
    
    function Generate-ImageAsync(){
        param( $itemId, $imagePrompt, $dimensions, $fieldName, $settings)
        
        $headers = @{
            "Content-Type" = "application/json"
        }
        $requestData = @{
            itemId = $itemId
            prompt = $imagePrompt
            dimensions = $dimensions
            fieldName = $fieldName
            graphQlBaseUrl = $settings.graphQlBaseUrl
            graphQlClientId = $settings.graphQlClientId
            graphQlClientSecret = $settings.graphQlClientSecret
        }
        $body = $requestData | ConvertTo-Json -Depth 3
        
        try {
            $response = Invoke-RestMethod -Uri $settings.generateImageEndpoint -Method Post -Headers $headers -Body $body
            $success = ($response -ne $null -and $response.status -eq "ok")
            return $success
        }
        catch {
            Write-Host $_.Exception.Message
            return $null
        }    
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20240828T144103Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\Admin
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "02d4cc07-3429-4b32-8ed5-85dce9cec586"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\rpeplau@arke.com
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20240903T193700Z
